CREATE TABLE articles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    url TEXT UNIQUE NOT NULL,
    stock_symbol TEXT NOT NULL,
    title TEXT,
    author TEXT,
    published_date TEXT,
    content TEXT,
    scraped_at TIMESTAMPTZ NOT NULL, -- Ensures every row has a timestamp
    is_embedded BOOLEAN DEFAULT FALSE -- Tracks whether the article has been embedded
);


create extension if not exists pg_cron;

select cron.schedule(
    'delete_old_articles',  -- Unique job name
    '0 */6 * * *',  -- Runs every hour (modify as needed)
    $$ delete from articles where scraped_at < now() - interval '24 hours' $$
);

-- Enable the pgvector extension to work with embedding vectors
create extension if not exists vector;

-- Create a table to store your documents
create table if not exists
  documents (
    id uuid primary key,
    content text, -- corresponds to Document.pageContent
    metadata jsonb, -- corresponds to Document.metadata
    embedding vector (768) -- 768 works for Nomic embeddings, change if needed
  );

-- Create an HNSW index on the embedding column for fast approximate search
create index on documents using hnsw (embedding vector_l2_ops);

-- Create a function to search for documents
create function match_documents (
  query_embedding vector (768),
  filter jsonb default '{}'
) returns table (
  id uuid,
  content text,
  metadata jsonb,
  similarity float
) language plpgsql as $$
#variable_conflict use_column
begin
  return query
  select
    id,
    content,
    metadata,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where metadata @> filter
  order by documents.embedding <=> query_embedding;
end;
$$;